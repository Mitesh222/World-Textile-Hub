// Menu Toggle for Mobile View
document.querySelector('.menu-toggle').addEventListener('click', () => {
    document.querySelector('.nav-links').classList.toggle('active');
});

// Smooth Scroll Functionality
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
        });
    });
});

// Modal Functionality
const openButtons = document.querySelectorAll('[data-modal-target]');
const closeButtons = document.querySelectorAll('[data-close-button]');
const overlay = document.getElementById('overlay');
let autoRotate; // Global variable to track the carousel auto-rotation

// Function to pause the carousel animation
function pauseCarouselAnimation() {
    const carousel = document.querySelector('.carousel');
    carousel.style.animationPlayState = 'paused'; // Pause CSS-based rotation
    clearInterval(autoRotate); // Stop the JS-based rotation
}

// Function to resume the carousel animation
function resumeCarouselAnimation() {
    const carousel = document.querySelector('.carousel');
    carousel.style.animationPlayState = 'running'; // Resume CSS-based rotation
    startAutoRotate(); // Restart the JS-based rotation
}

// Function to open modal and pause carousel
openButtons.forEach(button => {
    button.addEventListener('click', () => {
        const modal = document.querySelector(button.dataset.modalTarget);
        openModal(modal);
        pauseCarouselAnimation(); // Pausing carousel when a modal is opened
    });
});

// Function to close modal and resume carousel
closeButtons.forEach(button => {
    button.addEventListener('click', () => {
        const modal = button.closest('.modal');
        closeModal(modal);
        resumeCarouselAnimation(); // Resuming carousel when a modal is closed
    });
});

// Close modal when clicking the overlay and resume carousel
overlay.addEventListener('click', () => {
    const modals = document.querySelectorAll('.modal.active');
    modals.forEach(modal => closeModal(modal));
    resumeCarouselAnimation(); // Resume animation when modals are closed
});

function openModal(modal) {
    if (modal == null) return;
    modal.classList.add('active');
    overlay.classList.add('active');
}

function closeModal(modal) {
    if (modal == null) return;
    modal.classList.remove('active');
    overlay.classList.remove('active');
}

document.querySelectorAll('.problem-card').forEach(card => {
    card.addEventListener('click', function () {
        card.classList.toggle('is-flipped');
    });
});

document.addEventListener("DOMContentLoaded", () => {
    const joinOurTeamBtn = document.getElementById('join-our-team-btn');
    const consultantFormSection = document.getElementById('consultant-form-section');

    joinOurTeamBtn.addEventListener('click', () => {
        consultantFormSection.style.display = 'block';
        consultantFormSection.scrollIntoView({ behavior: 'smooth' });
    });
});

// Form Toggle for "Work with Us" Button
document.getElementById('work-with-us-btn').addEventListener('click', () => {
    const formSection = document.getElementById('consultant-form-section');
    if (formSection.style.display === 'none') {
        formSection.style.display = 'block';
        formSection.scrollIntoView({ behavior: 'smooth' });
    }
});

// Form Validation
const consultantForm = document.getElementById('consultant-form');
consultantForm.addEventListener('submit', function (e) {
    e.preventDefault();
    if (validateForm(consultantForm)) {
        alert('Thank you for submitting your details. We will contact you soon!');
        consultantForm.reset();
        document.getElementById('consultant-form-section').style.display = 'none';
    } else {
        alert('Please fill out all required fields.');
    }
});

function validateForm(form) {
    let valid = true;
    form.querySelectorAll('input[required], textarea[required]').forEach(input => {
        if (!input.value.trim()) {
            valid = false;
            input.style.borderColor = 'red';
        } else {
            input.style.borderColor = '#ccc';
        }
    });
    return valid;
}

// Dynamic Navbar Background on Scroll
window.addEventListener('scroll', () => {
    const navbar = document.querySelector('.navbar');
    if (window.scrollY > 50) {
        navbar.style.backgroundColor = '#001122';
    } else {
        navbar.style.backgroundColor = 'transparent';
    }
});

// 3D Hover Effect for Cards
const cards = document.querySelectorAll('.sector-card, .problem-card');

cards.forEach(card => {
    card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        card.style.transform = `rotateY(${(x / rect.width) * 10 - 5}deg) rotateX(${-(y / rect.height) * 10 + 5}deg)`;
    });

    card.addEventListener('mouseleave', () => {
        card.style.transform = 'rotateY(0deg) rotateX(0deg)';
    });
});

// Lazy Loading Images with Fade-In Effect
document.addEventListener("DOMContentLoaded", function() {
    const lazyImages = document.querySelectorAll("img");
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const image = entry.target;
                image.src = image.dataset.src || image.src;
                image.classList.add("fade-in");
                observer.unobserve(image);
            }
        });
    });

    lazyImages.forEach(image => {
        if (image.complete) {
            image.classList.add("fade-in");
        } else {
            imageObserver.observe(image);
        }
    });
});

// Fade-In Animation for Lazy Loaded Images
const fadeInAnimation = document.createElement('style');
fadeInAnimation.type = 'text/css';
fadeInAnimation.innerHTML = `
    .fade-in {
        opacity: 0;
        transition: opacity 1s ease-in;
    }
    img[src]:not([src=""]) {
        opacity: 1;
    }
`;
document.head.appendChild(fadeInAnimation);

// 3D Carousel Animation with TweenMax
const carouselItems = $('.carousel-item');
let currentAngle = 0;

// Function to rotate carousel by 45 degrees
function rotateCarousel(angle) {
    currentAngle += angle;
    TweenMax.to('.carousel', 1, { rotationY: currentAngle });
}

// Function to start the auto-rotation with slower speed
function startAutoRotate() {
    autoRotate = setInterval(() => {
        rotateCarousel(45);
    }, 5000); // Slower speed: carousel rotates every 5 seconds
}

// Function to pause the carousel rotation
function pauseCarousel() {
    clearInterval(autoRotate); // Clear the interval to stop auto-rotation
    const carousel = document.querySelector('.carousel');
    carousel.style.animationPlayState = 'paused'; // Pause CSS rotation
}

// Function to resume the carousel rotation
function resumeCarousel() {
    const carousel = document.querySelector('.carousel');
    carousel.style.animationPlayState = 'running'; // Resume CSS rotation
    startAutoRotate(); // Restart the JS-based rotation
}

// Start the carousel rotation when the page loads
startAutoRotate();

// Pause rotation on hover, resume on mouse leave
$('.carousel').hover(
    function () {
        pauseCarousel();
    },
    function () {
        resumeCarousel();
    }
);

// Open modal on carousel item click and pause carousel
carouselItems.each(function() {
    $(this).on('click', function() {
        const modalTarget = $(this).data('modal-target');
        const modal = document.querySelector(modalTarget);
        openModal(modal);
        pauseCarousel(); // Pause the carousel when a modal is opened
    });
});

// --- Fetch and Display Textile Reports from GitHub ---
document.addEventListener("DOMContentLoaded", function () {
    async function fetchReports() {
        try {
            // Fetch reports.json from your GitHub repository
            let response = await fetch("https://raw.githubusercontent.com/your-github-username/your-repository/main/reports.json");
            let data = await response.json();
            let container = document.getElementById("reports-container");

            container.innerHTML = ""; // Clear previous content

            // Loop through categories
            Object.keys(data).forEach(category => {
                let categoryDiv = document.createElement("div");
                categoryDiv.classList.add("report-category");
                categoryDiv.innerHTML = `<h3>${category}</h3>`;

                // Loop through reports in each category
                data[category].forEach(report => {
                    let reportDiv = document.createElement("div");
                    reportDiv.classList.add("report-card");
                    reportDiv.innerHTML = `
                        <h4><a href="${report.link}" target="_blank">${report.title}</a></h4>
                        <p>${report.summary}</p>
                        <small>Source: <a href="${report.source}" target="_blank">${new URL(report.source).hostname}</a></small>
                    `;
                    categoryDiv.appendChild(reportDiv);
                });

                container.appendChild(categoryDiv);
            });
        } catch (error) {
            console.error("Error fetching reports:", error);
            document.getElementById("reports-container").innerHTML = "<p>Failed to load reports.</p>";
        }
    }

    fetchReports();
});
